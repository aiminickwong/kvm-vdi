#!/usr/bin/env python
import time
import socket
import os, os.path
import json
import select
import subprocess
import re
from threading import Thread
from ConfigParser import ConfigParser
import logging
import logging.config


sockfile = "/usr/local/VDI/kvm-vdi.sock"
logdir = "/var/log/VDI";
if not os.path.exists(logdir):
    os.makedirs(logdir)
if os.path.exists( sockfile ):
    os.remove( sockfile )
logging.config.fileConfig('/usr/local/VDI/config')
logger = logging.getLogger('root')
server = socket.socket( socket.AF_UNIX, socket.SOCK_STREAM )
server.bind(sockfile)
os.chmod(sockfile, 0o777)
server.listen(5)
config = ConfigParser()
config.read('/usr/local/VDI/config')
socket_timeout = int(config.get('agent', 'socket_timeout'))
terminate=1 #oVirt agent seems to have fixed issue with windows OS. Making login thread exit after login routine


def vm_routine(vmname, username, password, os_type):
    global socket_timeout
    data = ""
    logger.info("Starting machine %s", vmname)
    err = subprocess.Popen("virsh start " + vmname, shell=True, stdout=subprocess.PIPE).communicate()
    socket_path = subprocess.Popen("virsh dumpxml " + vmname + "| xpath -q -e /domain/devices/channel/source/@path|grep kvm-vdi", shell=True, stdout=subprocess.PIPE).communicate()#get current spice channel path. Path changes on each VM startup
    socket_path = re.findall(r'"([^"]*)"', socket_path[0]) #remove everythig outside double quotes
    try:
        logger.debug("Opening socket %s",socket_path)
        virtio_socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        virtio_socket.connect(socket_path[0])
        ready = select.select([virtio_socket], [], [], socket_timeout) #Read VMs spice channel for n seconds. We assume that VM must boot in n seconds and start ovirt-agent.
        is_logged=0
        retries=0
        query_retry=10
        if ready[0] and username:
            logger.debug("oVirt agent is up")
            time.sleep(2)#wait for login
            serial_message= '{"__name__":"login","username": "' + username + '","password": "' + password + '"}'+"\n"
            while not is_logged and retries<5:
                logger.debug("Requesting new data for guest: %s", vmname)
                virtio_socket.sendall( '{"__name__":"refresh"}'+"\n") #let's ask data from oVirt agent on guest machine
                time.sleep(0.5)
                logger.debug("Reading SPICE channel")
                info = virtio_socket.recv(2048)
                info_lines=info.split("\n")
                got_reply=1
                if not is_logged and got_reply and query_retry>9:#if there are no logged-in users, execute SSO
                    logger.info ("Trying SSO")
                    logger.debug("Sending credentials for %s to VM: %s", username, vmname)
                    virtio_socket.sendall(serial_message)
                    retries += 1
                    query_retry=0
                elif not got_reply:
                    logger.debug("Got no info about logged-in users from oVirt agent. Retrying.")
                for python_line in info_lines:#go through all json responces, search for active-user
                    if python_line:#if line is not empty
                        try:
                            reply_data=json.loads(python_line)
                            if reply_data['__name__']=="active-user":
                                got_reply=1
                                query_retry += 1
                                logger.debug ("User query retry: %s", query_retry)
                                if reply_data["name"]=="None" or reply_data["name"]=="" or reply_data["name"]=="(unknown)":
                                    logger.debug ("There are currently no users logged into machine " +vmname)
                                else:
                                    logger.debug ("There's user " + reply_data["name"] + " logged into machine " + vmname)
                                    logger.info ("User login success")
                                    is_logged=1
                            else:
                                got_reply=0
                        except:
                            logger.debug("Non-json data: "+ python_line)
                if os_type=='linux':#do not wait for users to fully login as on windows
                    query_retry=10
                time.sleep(10)
        elif not ready[0]:
            logger.info ("Socket timeout for VM: %s", vmname)
        elif not username:
            logger.debug("Username is empty for VM: %s. Skipping SSO", vmname)
    except:
        logger.warning ("Virtio socket failure for VM: %s", vmname)
        logger.debug ("Closing vm %s, login thread", vmname)
        #cleaning credential information from memory
        username=None
        password=None
        serial_message=None
        return 0
    #cleaning credential information from memory
    username=None
    password=None
    serial_message=None
    global terminate
    while True and not terminate: #make thread stay till global shutdown. We need to have VM socket open from this thread. Its a hack, due problem in ovirt windows agent, where it consumes entire guest core if socket is not open from hypervisor side.
        time.sleep(2)
        info = virtio_socket.recv(1024)
        if not info:
            break
    logger.debug ("Closing socket %s", socket_path)
    virtio_socket.close()
    logger.info ("Done: %s", vmname)
    logger.debug ("Closing vm %s, login thread", vmname)




logger.info("Starting KVM-VDI hypervisor agent")
try:
    while True:
        conn, addr = server.accept()
        while True: 
            data = conn.recv( 1024 )
            if not data:
                break
            else:
                command=json.loads(data)
                fail=0
            try:
                vmname=command['vmname']
            except:
                fail=1
            try:
                username=command['username']
            except:
                fail=1
            try:
                password=command['password']
            except:
                fail=1
            try:
                os_type=command['os_type']
            except:
                fail=1
            if fail==1:
                logger.info ("Illegal json")
                logger.debug ("Illegal json: %s", data)
            else:
                logger.debug("Starting login thread for vm: %s", vmname)
                t = Thread(target=vm_routine, args=(vmname,username,password,os_type))
                t.start()
            break
except KeyboardInterrupt:
    logger.debug("Keyboard interrupt")
terminate=1
time.sleep(1)
server.close()
os.remove( sockfile )

